import os
configfile: 'config/config.yaml'
INPUT_DIR = config['input_directory']

SAMPLES, = glob_wildcards(os.path.join(INPUT_DIR,'{sample}_R1.fastq.gz'))
MATES = ['R1','R2']
rule all:
    input:
        #expand('results/fastp/{sample}_{mate}.fastp.fastq.gz',sample=SAMPLES,mate=MATES)
        #expand('results/spades/{sample}/contigs.fasta',sample=SAMPLES)
        'results/multiqc.html'
rule fastp:
    input:
        sample = expand(os.path.join(INPUT_DIR,'{sample}_{mate}.fastq.gz'),mate=MATES,allow_missing=True)
    output:
        trimmed = expand('results/fastp/{sample}_{mate}.fastp.fastq.gz',mate=MATES,allow_missing=True),
        unpaired1 = 'results/fastp/{sample}_U1.fastp.fastq.gz',
        unpaired2 = 'results/fastp/{sample}_U2.fastp.fastq.gz',
        failed = 'results/fastp/{sample}_failed.fastp.fastq.gz',
        json = 'results/fastp/{sample}.json',
        html = 'results/fastp/{sample}.html'
    container: 'docker://r/nanozoo/fastp'
    threads: 2
    log: 'results/logs/fastp/{sample}.log'
    wrapper: 
        "v2.2.1/bio/fastp"

rule spades:
    input:
        reads = expand('results/fastp/{sample}_{mate}.fastp.fastq.gz',mate=MATES,allow_missing=True)
    output:
        contigs='results/spades/{sample}/contigs.fasta',
        scaffolds='results/spades/{sample}/scaffolds.fasta',
        dir=directory("results/spades/{sample}/intermediate_files")
    benchmark:
        'results/benchmarks/spades/{sample}.txt'
    log:
        'results/logs/spades/{sample}.log'
    threads: 8
    resources:
        mem_mb = 8000
    wrapper:
        "v2.2.1/bio/spades/metaspades"

rule quast:
    input:
        fasta = 'results/spades/{sample}/contigs.fasta',
        pe1 = 'results/fastp/{sample}_R1.fastp.fastq.gz',
        pe2 = 'results/fastp/{sample}_R2.fastp.fastq.gz'
    output:
        'results/quast/{sample}/report.tsv'
    log:
        'logs/quast/{sample}.log'
    wrapper:
        'v2.2.1/bio/quast'

rule multiqc:
    input: 
        expand('results/fastp/{sample}.json',sample=SAMPLES),
        expand('results/quast/{sample}/report.tsv',sample=SAMPLES)
    output:
        'results/multiqc.html'
    params:
        extra='--config config/multiqc.yaml',
        use_input_files_only=True
    log:
        'results/multiqc.log'
    wrapper:
        "v2.2.1/bio/multiqc"

