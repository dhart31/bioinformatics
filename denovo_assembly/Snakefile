import os
WORKDIR = os.getcwd()
# Define input and output files
SAMPLES,MATE = glob_wildcards(os.path.join(WORKDIR,"raw_data/{sample}_dupes_{mate}.fastq"))

rule all:
    input:
        "multiqc_report.html"
        #expand("quast/{sample}/report.tsv", sample=SAMPLES)

rule fastp_trim:
    input:
        r1 = "raw_data/{sample}_dupes_R1.fastq",
        r2 = "raw_data/{sample}_dupes_R2.fastq"
    output:
        r1 = "fastp_trim/{sample}_trimmed_R1.fastq",
        r2 = "fastp_trim/{sample}_trimmed_R2.fastq",
        u1 = "fastp_trim/{sample}_trimmed_U1.fastq",
        u2 = "fastp_trim/{sample}_trimmed_U2.fastq",
        json = "fastp_trim/{sample}.json",
        html = "fastp_trim/{sample}.html"
    conda:
        "fastp"
    params:
        version = "software_mqc_versions.yaml"
    log:
        "fastp_trim/{sample}.log"
    params:
        version = "software_mqc_versions.yaml"
    shell:
        """
        fastp \
        --in1 {input.r1} --in2 {input.r2} \
        --out1 {output.r1} --out2 {output.r2} \
        --unpaired1 {output.u1} --unpaired2 {output.u2} \
        -j {output.json} -h {output.html} \
        2> {log};

        version=$(fastp --version 2>&1 | cut -f 2 -d ' ');
        echo "fastp: "$version > {params.version}
        """

# Rule for assembly
rule spades_assemble:
    input:
        r1 = "fastp_trim/{sample}_trimmed_R1.fastq",
        r2 = "fastp_trim/{sample}_trimmed_R2.fastq",
        u1 = "fastp_trim/{sample}_trimmed_U1.fastq",
        u2 = "fastp_trim/{sample}_trimmed_U2.fastq"
    output:
        contigs = "spades_assemble/{sample}/contigs.fasta"
    conda:
        "spades"
    params:
        spades_dir = lambda wildcards, output: os.path.dirname(output.contigs),
        version = "software_mqc_versions.yaml"
    log:
        error = "spades_assemble/{sample}_error.log",
        out = "spades_assemble/{sample}_output.log"
    threads: 16
    shell:
        """
        spades.py -1 {input.r1} -2 {input.r2} \
        -k auto -o {params.spades_dir} -t {threads} --rnaviral\
        1> {log.out} 2> {log.error};

        version=$(spades.py --version | cut -f 4 -d ' ');
        echo "spades: "$version >> {params.version}
        """

# Rule for post-assembly analysis
rule quast_qc:
    input:
        contigs = "spades_assemble/{sample}/contigs.fasta",
        r1 = "fastp_trim/{sample}_trimmed_R1.fastq",
        r2 = "fastp_trim/{sample}_trimmed_R2.fastq",
        u1 = "fastp_trim/{sample}_trimmed_U1.fastq",
        u2 = "fastp_trim/{sample}_trimmed_U2.fastq"
    output:
        "quast/{sample}/report.tsv"
    conda:
        "quast"
    params:
        reference = "~/references/AF266287.fasta",
        quast_dir = lambda wildcards, output: os.path.dirname(output[0]),
        version = "software_mqc_versions.yaml"
    log:
        error = "quast/{sample}_error.log",
        output = "quast/{sample}_output.log"
    shell:
        """
        quast.py {input.contigs} \
        -r {params.reference} \
        -1 {input.r1} -2 {input.r2} \
        --single {input.u1} \
        --single {input.u2} \
        -o {params.quast_dir}\
        -L \
        1> {log.output} 2> {log.error};
        version=$(quast --version | grep QUAST | cut -f 2 -d ' ');
        echo "quast: "$version >> {params.version}
        """

rule multiqc_report:
    input:
        expand("quast/{sample}/report.tsv", sample=SAMPLES)
    output:
        "multiqc_report.html"
    conda:
        "multiqc"
    params: 
        config = f"{workflow.basedir}/config/multiqc.yaml"
    shell:
        """
        multiqc --config {params.config} -f .;
        version=$(multiqc --version | cut -f3 -d' ');
        echo "multiqc: "$version >> software_mqc_versions.yaml
        """
