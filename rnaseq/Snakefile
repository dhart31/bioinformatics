import pandas as pd
SAMPLES, = glob_wildcards("raw_data/{sample}.read1.fastq.gz")
PLATFORM_UNITS = ['CXX1234-ACTGAC.1', 'CXX1234-TGACAC.1', 'CXX1234-CTGACT.1', 'CXX1234-TGACAC.1', 'CXX1234-GACACT.1', 'CXX1234-ACACTG.1']
df = pd.DataFrame(
    {
    "sample": SAMPLES,
    "platform_unit": PLATFORM_UNITS},
    index=SAMPLES)
df['rg_id'] = df['sample'].str.extract(r'(.*_Rep\d+)')
df['rg_sm'] = df['sample'].str.extract(r'(.{3})_Rep\d+')
df['rg_lb'] = df['sample'].str.extract(r'(.*_Rep\d+_ERCC-Mix\d+)')

rule all:
    input:
        "results/strandedness.txt",
        "results/prepDE/gene_count_matrix.csv",
        "results/prepDE/transcript_count_matrix.csv",
        "results/multiqc_report.html"

rule check_strandedness:
    input:
        r1 = "raw_data/HBR_Rep1_ERCC-Mix2_Build37-ErccTranscripts-chr22.read1.fastq.gz",
        r2 = "raw_data/HBR_Rep1_ERCC-Mix2_Build37-ErccTranscripts-chr22.read2.fastq.gz"
    output:
        "results/strandedness.txt"
    log:
        "logs/strandedness.log"
    conda:
        "how_are_we_stranded_here"
    params:
        gtf = config["gtf"],
        transcripts = config["transcripts"]
    shell:
        """
        check_strandedness \
        --gtf {params.gtf}\
        --transcripts {params.transcripts}\
        --reads_1 {input.r1}\
        --reads_2 {input.r2}\
        > {output} 2> {log};
        """

rule fastp_trim:
    input:
        r1 = "raw_data/{sample}.read1.fastq.gz",
        r2 = "raw_data/{sample}.read2.fastq.gz"
    output:
        r1 = "results/fastp_trim/{sample}.trimmed.read1.fastq.gz",
        r2 = "results/fastp_trim/{sample}.trimmed.read2.fastq.gz",
        json = "results/fastp_trim/{sample}.json",
        html = "results/fastp_trim/{sample}.html"
    log:
        "logs/fastp_trim/{sample}.log"
    conda:
        "fastp"
    shell:
        """
        fastp \
        -i {input.r1} -I {input.r2} \
        -o {output.r1} -O {output.r2} \
        -j {output.json} -h {output.html} \
        2> {log};
        """

rule hisat2_index:
    output:
        index = directory("ref/hisat2_index")
    log:
        "logs/hisat2_index.log"
    conda:
        "hisat2"
    params:
        gtf = config["gtf"],
        fasta = config["genome_fasta"]
    shell:
        """
        mkdir -p {output.index};
        hisat2_extract_splice_sites.py {params.gtf} > ref/splice_sites.txt;
        hisat2_extract_exons.py {params.gtf} > ref/exons.txt;
        hisat2-build -p 16 \
        --ss ref/splice_sites.txt \
        --exon ref/exons.txt \
        {params.fasta} {output.index}/hisat2_index > {log} 2>&1;
        """

rule hisat2_align:
    input:
        index="ref/hisat2_index",
        r1 = "results/fastp_trim/{sample}.trimmed.read1.fastq.gz",
        r2 = "results/fastp_trim/{sample}.trimmed.read2.fastq.gz"
    output:
        sam = "results/hisat2_align/{sample}.sam"
    log:
        "logs/hisat2_align/{sample}.log"
    conda:
        "hisat2"
    threads: 16
    params:
        read_groups = lambda wildcards: df.loc[wildcards.sample, ["rg_id", "rg_sm", "rg_lb"]],
        platform_unit = lambda wildcards: df.loc[wildcards.sample, "platform_unit"]
    shell:
        """
        hisat2 -p {threads} \
        --rg-id {params.read_groups[rg_id]}\
        --rg SM:{params.read_groups[rg_sm]}\
        --rg LB:{params.read_groups[rg_lb]}\
        --rg PL:ILLUMINA\
        --rg PU:{params.platform_unit} \
        --dta \
        --rna-strandness RF \
        -x {input.index}/hisat2_index\
        -1 {input.r1} \
        -2 {input.r2} \
        -S {output.sam} \
        > {log} 2>&1;
        """

rule samtools_sort_index_stat:
    input:
        bam = "results/hisat2_align/{sample}.sam"
    output:
        sorted_bam = "results/hisat2_align/{sample}.sorted.bam",
        flagstat = "results/hisat2_align/{sample}.flagstat"
    conda:
        "samtools"
    log:
        "logs/sort_bam/{sample}.log"
    threads: 16
    shell:
        """
        samtools sort -@ {threads} -o {output.sorted_bam} {input.bam} > {log} 2>&1;
        samtools index -@ {threads} {output.sorted_bam};
        samtools flagstat {output.sorted_bam} > {output.flagstat};
        """

rule fastqc:
    input:
        sorted_bam = "results/hisat2_align/{sample}.sorted.bam"
    output:
        html = "results/fastqc/{sample}.sorted_fastqc.html",
        zip = "results/fastqc/{sample}.sorted_fastqc.zip"
    log:
        "logs/fastqc/{sample}.log"
    conda:
        "fastqc"
    shell:
        """
        fastqc -o results/fastqc {input.sorted_bam} > {log} 2>&1;
        """

rule stringtie_assemble:
    input:
        bam = "results/hisat2_align/{sample}.sorted.bam"
    output:
        gtf = "results/stringtie/assemble/{sample}.gtf"
    log:
        "logs/stringtie/{sample}.log"
    conda:
        "stringtie"
    params:
        strandedness = "--rf",
        gtf = "ref/chr22_with_ERCC92.gtf"
    threads: 16
    shell:
        """
        stringtie {params.strandedness} -p {threads} \
        -G {params.gtf} \
        -o {output.gtf} -l {wildcards.sample} \
        {input.bam} > {log} 2>&1;
        """

rule stringtie_merge:
    input:
        expand("results/stringtie/assemble/{sample}.gtf", sample = df["sample"])
    output:
        "results/stringtie/merged.gtf"
    log:
        "logs/stringtie/merge.log"
    conda:
        "stringtie"
    threads: 16
    shell:
        """
        stringtie --merge -p {threads} \
        -G ref/chr22_with_ERCC92.gtf \
        -o {output} \
        {input} > {log} 2>&1;
        """

rule stringtie_quant:
    input:
        gtf = "results/stringtie/merged.gtf",
        bam = "results/hisat2_align/{sample}.sorted.bam"
    output:
        gtf = "results/stringtie/quant/{sample}/{sample}.gtf",
        abundance = "results/stringtie/quant/{sample}/{sample}.tsv",
    log:
        "logs/stringtie_quant/{sample}.log"
    conda:
        "stringtie"
    threads: 16
    shell:
        """
        stringtie -e -B -p {threads} \
        -G {input.gtf} \
        -A {output.abundance} \
        -o {output.gtf} \
        {input.bam} > {log} 2>&1;
        """

rule prepDE:
    input:
        expand("results/stringtie/quant/{sample}/{sample}.gtf", sample = df["sample"])
    output:
        gene = "results/prepDE/gene_count_matrix.csv",
        transcript = "results/prepDE/transcript_count_matrix.csv"
    log:
        "logs/prepDE.log"
    params:
        script = "scripts/prepDE.py3"
    shell:
        """
        python3 {params.script} \
        -i results/stringtie/quant \
        -g {output.gene} \
        -t {output.transcript}
        > {log} 2>&1;
        """

rule get_software_versions:
    output:
        "results/software_mqc_versions.yaml"
    params:
        conda_bin = "/home/dhart31/miniforge3/bin"
    shell:
        """
        set +u; source {params.conda_bin}/activate how_are_we_stranded_here; set -u;
        version=$(mamba list | grep how_are_we_stranded_here | tail -n 1 | awk '{{ print $2 }}'); 
        echo "how_are_we_stranded_here: "$version > {output};

        set +u; source {params.conda_bin}/activate fastp; set -u;
        version=$(fastp --version 2>&1 | cut -f 2 -d ' ');
        echo "fastp: "$version >> {output};

        set +u; source {params.conda_bin}/activate hisat2; set -u;
        version=$(hisat2 --version | head -n 1| cut -f 3 -d ' ');
        echo "hisat2: "$version >> {output};

        set +u; source {params.conda_bin}/activate fastqc; set -u;
        version=$(fastqc --version | cut -f 2 -d ' ');
        echo "fastqc: "$version >> {output};

        set +u; source {params.conda_bin}/activate samtools; set -u;
        version=$(samtools --version | head -n 1 | cut -f 2 -d ' ');
        echo "samtools: "$version >> {output};

        set +u; source {params.conda_bin}/activate stringtie; set -u;
        version=$(stringtie --version);
        echo "stringtie: "$version >> {output};
        """

rule multiqc:
    input:
        expand("results/fastp_trim/{sample}.json", sample=df["sample"]),
        expand("results/fastqc/{sample}.sorted_fastqc.html", sample=df["sample"]),
        expand("logs/hisat2_align/{sample}.log", sample=df["sample"]),
        "results/software_mqc_versions.yaml"
    output:
        "results/multiqc_report.html"
    conda:
        "multiqc"
    params:
        config = f"{workflow.basedir}/config/multiqc.yaml"
    shell:
        """
        multiqc -f results logs -o results;
        """